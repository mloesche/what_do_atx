version: '3.8'

services:
  # PostgreSQL Database with Extensions
  database:
    image: pgvector/pgvector:pg15
    container_name: what-do-atx-db
    environment:
      POSTGRES_DB: what_do_atx_dev
      POSTGRES_USER: what_do_atx_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U what_do_atx_user -d what_do_atx_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - what-do-atx

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: what-do-atx-api
    environment:
      NODE_ENV: development
      PORT: 3001
      LOG_LEVEL: debug
      DATABASE_URL: postgresql://what_do_atx_user:dev_password@database:5432/what_do_atx_dev
      JWT_SECRET: dev-jwt-secret-key
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      # For development: mount source code for hot reloading
      - ./backend/src:/app/src:ro
      - ./backend/package.json:/app/package.json:ro
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - what-do-atx

  # Next.js Frontend (for full-stack development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: what-do-atx-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      # For development: mount source code for hot reloading
      - ./src:/app/src:ro
      - ./public:/app/public:ro
      - ./package.json:/app/package.json:ro
      - ./next.config.js:/app/next.config.js:ro
    depends_on:
      - backend
    networks:
      - what-do-atx

  # Redis (for future caching/sessions)
  redis:
    image: redis:7-alpine
    container_name: what-do-atx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - what-do-atx

volumes:
  postgres_data:
  redis_data:

networks:
  what-do-atx:
    driver: bridge 