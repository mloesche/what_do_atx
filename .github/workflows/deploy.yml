name: Deploy to Vercel and Render

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend (Next.js)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: .next/
          retention-days: 1

  # Test Backend (Docker)
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend (Docker + Node.js API)
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t what-do-atx-backend:test .

      - name: Setup Node.js (for testing)
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
          JWT_SECRET: test-secret

      - name: Test Docker container
        run: |
          docker run -d --name test-backend \
            -p 3001:10000 \
            -e NODE_ENV=test \
            -e PORT=10000 \
            -e JWT_SECRET=test-secret \
            -e DATABASE_URL=postgresql://postgres:postgres@host.docker.internal:5432/test_db \
            --add-host host.docker.internal:host-gateway \
            what-do-atx-backend:test
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3001/health || exit 1
          
          # Cleanup
          docker stop test-backend
          docker rm test-backend

  # Deploy to Vercel (Frontend)
  deploy-vercel:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Vercel
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        if: ${{ secrets.VERCEL_TOKEN && secrets.VERCEL_ORG_ID && secrets.VERCEL_PROJECT_ID }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}

      - name: Skip Vercel deployment (missing secrets)
        if: ${{ !secrets.VERCEL_TOKEN || !secrets.VERCEL_ORG_ID || !secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "⚠️ Skipping Vercel deployment - missing required secrets:"
          echo "  - VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN && 'set' || 'missing' }}"
          echo "  - VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID && 'set' || 'missing' }}"
          echo "  - VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID && 'set' || 'missing' }}"
          echo "  📚 See docs/DEPLOYMENT_GUIDE.md for setup instructions"

  # Deploy to Render (Backend)
  deploy-render:
    runs-on: ubuntu-latest
    name: Deploy Backend to Render
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        if: ${{ secrets.RENDER_SERVICE_ID && secrets.RENDER_API_KEY }}
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

      - name: Skip Render deployment (missing secrets)
        if: ${{ !secrets.RENDER_SERVICE_ID || !secrets.RENDER_API_KEY }}
        run: |
          echo "⚠️ Skipping Render deployment - missing required secrets:"
          echo "  - RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID && 'set' || 'missing' }}"
          echo "  - RENDER_API_KEY: ${{ secrets.RENDER_API_KEY && 'set' || 'missing' }}"
          echo "  📚 See docs/DEPLOYMENT_GUIDE.md for setup instructions"

  # Health Check (Optional - only if services are deployed)
  health-check:
    runs-on: ubuntu-latest
    name: Post-Deployment Health Check
    needs: [deploy-vercel, deploy-render]
    if: github.ref == 'refs/heads/main' && (needs.deploy-vercel.result == 'success' || needs.deploy-render.result == 'success')
    
    steps:
      - name: Check Frontend Health
        if: ${{ secrets.VERCEL_PROJECT_ID && secrets.FRONTEND_URL }}
        run: |
          echo "Checking frontend health at ${{ secrets.FRONTEND_URL }}..."
          curl -f ${{ secrets.FRONTEND_URL }} || echo "⚠️ Frontend health check failed"
          echo "✅ Frontend health check completed"

      - name: Check Backend Health
        if: ${{ secrets.RENDER_SERVICE_ID && secrets.BACKEND_URL }}
        run: |
          echo "Checking backend health at ${{ secrets.BACKEND_URL }}/health..."
          curl -f ${{ secrets.BACKEND_URL }}/health || echo "⚠️ Backend health check failed"
          echo "✅ Backend health check completed"

      - name: Test Cross-Service Communication
        if: ${{ secrets.FRONTEND_URL && secrets.BACKEND_URL }}
        run: |
          echo "Testing CORS and connectivity..."
          curl -f -H "Origin: ${{ secrets.FRONTEND_URL }}" \
               -H "Access-Control-Request-Method: GET" \
               -H "Access-Control-Request-Headers: Content-Type" \
               -X OPTIONS ${{ secrets.BACKEND_URL }}/health || echo "⚠️ CORS test failed"
          echo "✅ Cross-service communication test completed"

      - name: Skip health checks (missing URLs)
        if: ${{ !secrets.FRONTEND_URL || !secrets.BACKEND_URL }}
        run: |
          echo "⚠️ Skipping health checks - missing URL secrets:"
          echo "  - FRONTEND_URL: ${{ secrets.FRONTEND_URL && 'set' || 'missing' }}"
          echo "  - BACKEND_URL: ${{ secrets.BACKEND_URL && 'set' || 'missing' }}"
          echo "  Add these secrets after deployment for automatic health checks"

  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [health-check]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify Deployment Status
        run: |
          if [ "${{ needs.health-check.result }}" == "success" ] || [ "${{ needs.health-check.result }}" == "skipped" ]; then
            echo "🚀 Deployment pipeline completed!"
            echo "📚 Next steps: Configure secrets in GitHub Settings > Secrets and Variables > Actions"
            echo "📚 See docs/DEPLOYMENT_GUIDE.md for detailed setup instructions"
          else
            echo "❌ Deployment pipeline failed!"
            echo "📚 Check docs/ROLLBACK_PROCEDURES.md for recovery procedures"
            exit 1
          fi 