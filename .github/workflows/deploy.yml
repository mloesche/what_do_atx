name: Deploy to Vercel and Render

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Test Frontend
  test-frontend:
    runs-on: ubuntu-latest
    name: Test Frontend (Next.js)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint check
        run: npm run lint

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: .next/
          retention-days: 1

  # Test Backend
  test-backend:
    runs-on: ubuntu-latest
    name: Test Backend (Node.js API)
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
          JWT_SECRET: test-secret

  # Deploy to Vercel (Frontend)
  deploy-vercel:
    runs-on: ubuntu-latest
    name: Deploy Frontend to Vercel
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: ${{ github.ref == 'refs/heads/main' && '--prod' || '' }}

  # Deploy to Render (Backend)
  deploy-render:
    runs-on: ubuntu-latest
    name: Deploy Backend to Render
    needs: [test-frontend, test-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    name: Post-Deployment Health Check
    needs: [deploy-vercel, deploy-render]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Check Frontend Health
        run: |
          echo "Checking frontend health..."
          curl -f https://what-do-atx.vercel.app/ || exit 1
          echo "‚úÖ Frontend is healthy"

      - name: Check Backend Health
        run: |
          echo "Checking backend health..."
          curl -f https://what-do-atx-api.onrender.com/health || exit 1
          echo "‚úÖ Backend is healthy"

      - name: Test Cross-Service Communication
        run: |
          echo "Testing CORS and connectivity..."
          curl -f -H "Origin: https://what-do-atx.vercel.app" \
               -H "Access-Control-Request-Method: GET" \
               -H "Access-Control-Request-Headers: Content-Type" \
               -X OPTIONS https://what-do-atx-api.onrender.com/health || exit 1
          echo "‚úÖ Cross-service communication working"

  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    name: Deployment Notification
    needs: [health-check]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify Success
        if: needs.health-check.result == 'success'
        run: |
          echo "üöÄ Deployment successful!"
          echo "Frontend: https://what-do-atx.vercel.app"
          echo "Backend: https://what-do-atx-api.onrender.com"

      - name: Notify Failure
        if: needs.health-check.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs for details."
          exit 1 